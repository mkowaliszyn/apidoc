/**
 * Generated by apidoc - http://www.apidoc.me
 * apidoc:0.7.37 http://www.apidoc.me/gilt/apidoc-form/0.0.1-dev/play_2_3_client
 */
package com.gilt.apidocform.models {

  case class BodyForm(
    `type`: String,
    description: scala.Option[String] = None
  )

  case class EnumForm(
    description: scala.Option[String] = None,
    values: Seq[com.gilt.apidocform.models.EnumValueForm]
  )

  case class EnumValueForm(
    name: String,
    description: scala.Option[String] = None
  )

  case class FieldForm(
    name: String,
    `type`: String,
    description: scala.Option[String] = None,
    default: scala.Option[String] = None,
    required: scala.Option[Boolean] = None,
    minimum: scala.Option[Long] = None,
    maximum: scala.Option[Long] = None,
    example: scala.Option[String] = None
  )

  case class HeaderForm(
    name: String,
    `type`: String,
    description: scala.Option[String] = None,
    required: Boolean,
    default: scala.Option[String] = None
  )

  case class ModelForm(
    plural: scala.Option[String] = None,
    description: scala.Option[String] = None,
    fields: Seq[com.gilt.apidocform.models.FieldForm]
  )

  case class OperationForm(
    method: String,
    path: scala.Option[String] = None,
    description: scala.Option[String] = None,
    body: scala.Option[com.gilt.apidocform.models.BodyForm] = None,
    parameters: Seq[com.gilt.apidocform.models.ParameterForm] = Nil,
    responses: Map[String, com.gilt.apidocform.models.ResponseForm] = Map.empty
  )

  case class ParameterForm(
    name: String,
    `type`: String,
    description: scala.Option[String] = None,
    required: scala.Option[Boolean] = None,
    default: scala.Option[String] = None,
    minimum: scala.Option[Long] = None,
    maximum: scala.Option[Long] = None,
    example: scala.Option[String] = None
  )

  case class ResourceForm(
    description: scala.Option[String] = None,
    path: scala.Option[String] = None,
    operations: Seq[com.gilt.apidocform.models.OperationForm]
  )

  case class ResponseForm(
    `type`: String
  )

  case class ServiceForm(
    name: String,
    baseUrl: scala.Option[String] = None,
    description: scala.Option[String] = None,
    headers: Seq[com.gilt.apidocform.models.HeaderForm],
    enums: Map[String, com.gilt.apidocform.models.EnumForm],
    models: Map[String, com.gilt.apidocform.models.ModelForm],
    resources: Map[String, com.gilt.apidocform.models.ResourceForm]
  )

}

package com.gilt.apidocform.models {
  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._

    private[apidocform] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[apidocform] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[apidocform] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[apidocform] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }


    implicit def jsonReadsApidocformBodyForm: play.api.libs.json.Reads[BodyForm] = {
      (
        (__ \ "type").read[String] and
        (__ \ "description").readNullable[String]
      )(BodyForm.apply _)
    }

    implicit def jsonWritesApidocformBodyForm: play.api.libs.json.Writes[BodyForm] = {
      (
        (__ \ "type").write[String] and
        (__ \ "description").write[scala.Option[String]]
      )(unlift(BodyForm.unapply _))
    }

    implicit def jsonReadsApidocformEnumForm: play.api.libs.json.Reads[EnumForm] = {
      (
        (__ \ "description").readNullable[String] and
        (__ \ "values").readNullable[Seq[com.gilt.apidocform.models.EnumValueForm]].map(_.getOrElse(Nil))
      )(EnumForm.apply _)
    }

    implicit def jsonWritesApidocformEnumForm: play.api.libs.json.Writes[EnumForm] = {
      (
        (__ \ "description").write[scala.Option[String]] and
        (__ \ "values").write[Seq[com.gilt.apidocform.models.EnumValueForm]]
      )(unlift(EnumForm.unapply _))
    }

    implicit def jsonReadsApidocformEnumValueForm: play.api.libs.json.Reads[EnumValueForm] = {
      (
        (__ \ "name").read[String] and
        (__ \ "description").readNullable[String]
      )(EnumValueForm.apply _)
    }

    implicit def jsonWritesApidocformEnumValueForm: play.api.libs.json.Writes[EnumValueForm] = {
      (
        (__ \ "name").write[String] and
        (__ \ "description").write[scala.Option[String]]
      )(unlift(EnumValueForm.unapply _))
    }

    implicit def jsonReadsApidocformFieldForm: play.api.libs.json.Reads[FieldForm] = {
      (
        (__ \ "name").read[String] and
        (__ \ "type").read[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "default").readNullable[String] and
        (__ \ "required").readNullable[Boolean] and
        (__ \ "minimum").readNullable[Long] and
        (__ \ "maximum").readNullable[Long] and
        (__ \ "example").readNullable[String]
      )(FieldForm.apply _)
    }

    implicit def jsonWritesApidocformFieldForm: play.api.libs.json.Writes[FieldForm] = {
      (
        (__ \ "name").write[String] and
        (__ \ "type").write[String] and
        (__ \ "description").write[scala.Option[String]] and
        (__ \ "default").write[scala.Option[String]] and
        (__ \ "required").write[scala.Option[Boolean]] and
        (__ \ "minimum").write[scala.Option[Long]] and
        (__ \ "maximum").write[scala.Option[Long]] and
        (__ \ "example").write[scala.Option[String]]
      )(unlift(FieldForm.unapply _))
    }

    implicit def jsonReadsApidocformHeaderForm: play.api.libs.json.Reads[HeaderForm] = {
      (
        (__ \ "name").read[String] and
        (__ \ "type").read[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "required").read[Boolean] and
        (__ \ "default").readNullable[String]
      )(HeaderForm.apply _)
    }

    implicit def jsonWritesApidocformHeaderForm: play.api.libs.json.Writes[HeaderForm] = {
      (
        (__ \ "name").write[String] and
        (__ \ "type").write[String] and
        (__ \ "description").write[scala.Option[String]] and
        (__ \ "required").write[Boolean] and
        (__ \ "default").write[scala.Option[String]]
      )(unlift(HeaderForm.unapply _))
    }

    implicit def jsonReadsApidocformModelForm: play.api.libs.json.Reads[ModelForm] = {
      (
        (__ \ "plural").readNullable[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "fields").readNullable[Seq[com.gilt.apidocform.models.FieldForm]].map(_.getOrElse(Nil))
      )(ModelForm.apply _)
    }

    implicit def jsonWritesApidocformModelForm: play.api.libs.json.Writes[ModelForm] = {
      (
        (__ \ "plural").write[scala.Option[String]] and
        (__ \ "description").write[scala.Option[String]] and
        (__ \ "fields").write[Seq[com.gilt.apidocform.models.FieldForm]]
      )(unlift(ModelForm.unapply _))
    }

    implicit def jsonReadsApidocformOperationForm: play.api.libs.json.Reads[OperationForm] = {
      (
        (__ \ "method").read[String] and
        (__ \ "path").readNullable[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "body").readNullable[com.gilt.apidocform.models.BodyForm] and
        (__ \ "parameters").readNullable[Seq[com.gilt.apidocform.models.ParameterForm]].map(_.getOrElse(Nil)) and
        (__ \ "responses").readNullable[Map[String, com.gilt.apidocform.models.ResponseForm]].map(_.getOrElse(Map.empty))
      )(OperationForm.apply _)
    }

    implicit def jsonWritesApidocformOperationForm: play.api.libs.json.Writes[OperationForm] = {
      (
        (__ \ "method").write[String] and
        (__ \ "path").write[scala.Option[String]] and
        (__ \ "description").write[scala.Option[String]] and
        (__ \ "body").write[scala.Option[com.gilt.apidocform.models.BodyForm]] and
        (__ \ "parameters").write[Seq[com.gilt.apidocform.models.ParameterForm]] and
        (__ \ "responses").write[Map[String, com.gilt.apidocform.models.ResponseForm]]
      )(unlift(OperationForm.unapply _))
    }

    implicit def jsonReadsApidocformParameterForm: play.api.libs.json.Reads[ParameterForm] = {
      (
        (__ \ "name").read[String] and
        (__ \ "type").read[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "required").readNullable[Boolean] and
        (__ \ "default").readNullable[String] and
        (__ \ "minimum").readNullable[Long] and
        (__ \ "maximum").readNullable[Long] and
        (__ \ "example").readNullable[String]
      )(ParameterForm.apply _)
    }

    implicit def jsonWritesApidocformParameterForm: play.api.libs.json.Writes[ParameterForm] = {
      (
        (__ \ "name").write[String] and
        (__ \ "type").write[String] and
        (__ \ "description").write[scala.Option[String]] and
        (__ \ "required").write[scala.Option[Boolean]] and
        (__ \ "default").write[scala.Option[String]] and
        (__ \ "minimum").write[scala.Option[Long]] and
        (__ \ "maximum").write[scala.Option[Long]] and
        (__ \ "example").write[scala.Option[String]]
      )(unlift(ParameterForm.unapply _))
    }

    implicit def jsonReadsApidocformResourceForm: play.api.libs.json.Reads[ResourceForm] = {
      (
        (__ \ "description").readNullable[String] and
        (__ \ "path").readNullable[String] and
        (__ \ "operations").readNullable[Seq[com.gilt.apidocform.models.OperationForm]].map(_.getOrElse(Nil))
      )(ResourceForm.apply _)
    }

    implicit def jsonWritesApidocformResourceForm: play.api.libs.json.Writes[ResourceForm] = {
      (
        (__ \ "description").write[scala.Option[String]] and
        (__ \ "path").write[scala.Option[String]] and
        (__ \ "operations").write[Seq[com.gilt.apidocform.models.OperationForm]]
      )(unlift(ResourceForm.unapply _))
    }

    implicit def jsonReadsApidocformResponseForm: play.api.libs.json.Reads[ResponseForm] = {
      (__ \ "type").read[String].map { x => new ResponseForm(`type` = x) }
    }

    implicit def jsonWritesApidocformResponseForm: play.api.libs.json.Writes[ResponseForm] = new play.api.libs.json.Writes[ResponseForm] {
      def writes(x: ResponseForm) = play.api.libs.json.Json.obj(
        "type" -> play.api.libs.json.Json.toJson(x.`type`)
      )
    }

    implicit def jsonReadsApidocformServiceForm: play.api.libs.json.Reads[ServiceForm] = {
      (
        (__ \ "name").read[String] and
        (__ \ "base_url").readNullable[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "headers").readNullable[Seq[com.gilt.apidocform.models.HeaderForm]].map(_.getOrElse(Nil)) and
        (__ \ "enums").readNullable[Map[String, com.gilt.apidocform.models.EnumForm]].map(_.getOrElse(Map.empty)) and
        (__ \ "models").readNullable[Map[String, com.gilt.apidocform.models.ModelForm]].map(_.getOrElse(Map.empty)) and
        (__ \ "resources").readNullable[Map[String, com.gilt.apidocform.models.ResourceForm]].map(_.getOrElse(Map.empty))
      )(ServiceForm.apply _)
    }

    implicit def jsonWritesApidocformServiceForm: play.api.libs.json.Writes[ServiceForm] = {
      (
        (__ \ "name").write[String] and
        (__ \ "base_url").write[scala.Option[String]] and
        (__ \ "description").write[scala.Option[String]] and
        (__ \ "headers").write[Seq[com.gilt.apidocform.models.HeaderForm]] and
        (__ \ "enums").write[Map[String, com.gilt.apidocform.models.EnumForm]] and
        (__ \ "models").write[Map[String, com.gilt.apidocform.models.ModelForm]] and
        (__ \ "resources").write[Map[String, com.gilt.apidocform.models.ResourceForm]]
      )(unlift(ServiceForm.unapply _))
    }
  }
}

package com.gilt.apidocform {

  class Client(apiUrl: String, apiToken: scala.Option[String] = None) {
    import com.gilt.apidocform.models.json._

    private val UserAgent = "apidoc:0.7.37 http://www.apidoc.me/gilt/apidoc-form/0.0.1-dev/play_2_3_client"
    private val logger = play.api.Logger("com.gilt.apidocform.client")

    logger.info(s"Initializing com.gilt.apidocform.client for url $apiUrl")





    def _requestHolder(path: String): play.api.libs.ws.WSRequestHolder = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(apiUrl + path).withHeaders("User-Agent" -> UserAgent)
      apiToken.fold(holder) { token =>
        holder.withAuth(token, "", play.api.libs.ws.WSAuthScheme.BASIC)
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequestHolder)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequestHolder = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield name -> value
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      apiToken.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Seq.empty,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withQueryString(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withQueryString(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withQueryString(queryParameters:_*)).head()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

  }

  case class FailedRequest(
    response: play.api.libs.ws.WSResponse,
    message: Option[String] = None
  ) extends Exception(message.getOrElse(response.status + ": " + response.body))

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import com.gilt.apidocform.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )



  }

}
